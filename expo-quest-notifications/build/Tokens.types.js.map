{"version":3,"file":"Tokens.types.js","sourceRoot":"","sources":["../src/Tokens.types.ts"],"names":[],"mappings":"","sourcesContent":["import { Platform } from 'expo-modules-core';\n\n// @docsMissing\nexport interface NativeDevicePushToken {\n  type: 'ios' | 'android';\n  data: string;\n}\n\n// @docsMissing\nexport interface WebDevicePushToken {\n  type: 'web';\n  data: {\n    endpoint: string;\n    keys: {\n      p256dh: string;\n      auth: string;\n    };\n  };\n}\n\n// @docsMissing\ntype ExplicitlySupportedDevicePushToken = NativeDevicePushToken | WebDevicePushToken;\n\ntype ImplicitlySupportedDevicePushToken = {\n  /**\n   * Either `android`, `ios` or `web`.\n   */\n  type: Exclude<typeof Platform.OS, ExplicitlySupportedDevicePushToken['type']>;\n  /**\n   * Either the push token as a string (when for native platforms), or an object conforming to the type below (for web):\n   * ```ts\n   * {\n   *   endpoint: string;\n   *   keys: {\n   *     p256dh: string;\n   *     auth: string;\n   *   }\n   * }\n   * ```\n   */\n  data: any;\n};\n\n/**\n * In simple terms, an object of `type: Platform.OS` and `data: any`. The `data` type depends on the environment - on a native device it will be a string,\n * which you can then use to send notifications via Firebase Cloud Messaging (Android) or APNs (iOS); on web it will be a registration object (VAPID).\n */\nexport type DevicePushToken =\n  | ExplicitlySupportedDevicePushToken\n  | ImplicitlySupportedDevicePushToken;\n\n/**\n * Borrowing structure from `DevicePushToken` a little. You can use the `data` value to send notifications via Expo Notifications service.\n */\nexport interface ExpoPushToken {\n  /**\n   * Always set to `\"expo\"`.\n   */\n  type: 'expo';\n  /**\n   * The acquired push token.\n   */\n  data: string;\n}\n"]}